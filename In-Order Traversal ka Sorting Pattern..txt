#include <iostream>
using namespace std;

// Structure to create tree nodes
struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;

    // Constructor for easy initialization
    TreeNode(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Class for managing the tree
class Tree {
private:
    TreeNode* root;
    // Helper function for in-order traversal
    void inOrderTraversal(TreeNode* node) {
        if (node == nullptr) 
          return;

        // Visit left subtree
        inOrderTraversal(node->left);

        // Visit current node
        cout << node->data << " ";

        // Visit right subtree
        inOrderTraversal(node->right);
    }

    // Helper function to insert a new node into the tree
    TreeNode* insertNode(TreeNode* node, int value) {
        if (node == nullptr) {
            // Create a new node if the position is empty
            return new TreeNode(value);
        }
        if (value < node->data) {
            // Insert in left subtree
            node->left = insertNode(node->left, value);
        } else {
            // Insert in right subtree
            node->right = insertNode(node->right, value);
        }
        return node;
    }
public:
    // Constructor
    Tree() : root(nullptr) {}
    // Function to insert data from an array into the tree
    void insertFromArray(int values[], int size) {
        for (int i = 0; i < size; ++i) {
            root = insertNode(root, values[i]);
        }
    }
    // Wrapper for in-order traversal
    void displayInOrder() {
        cout << "In-order Traversal: ";
        inOrderTraversal(root);
        cout << endl;
    }
};
// Main function to demonstrate the functionality
int main() {
    Tree tree;

    // Array of values to be inserted into the tree
    int values[] = {5, 3, 7, 2, 4};
    int size = sizeof(values) / sizeof(values[0]);

    // Insert values from the array into the tree
    tree.insertFromArray(values, size);

    // Display in-order traversal
    tree.displayInOrder();

    return 0;
}
